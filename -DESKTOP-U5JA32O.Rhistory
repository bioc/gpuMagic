}
}
if(!is.null(curRule)){
rule=rbind(rule,curRule,stringsAsFactors=FALSE)
}
}
varDims[i,]=curVar_info
}
varDims
curRule
rule
#Find the rule for the parameters with values
rule=data.frame(var=character(0),rule=character(0),stringsAsFactors = FALSE)
for(i in seq_along(allVars_ind)){
curVar_info=varDims[i,]
curVar_ind=curVar_info$ind
curVar_name=curVar_info$var
for(j in seq_len(2)){
curRule=NULL
curSize=curVar_info[2+j]
if(curSize==1){
curVar_info[4+j]=1
curRule=c(curVar_name,paste0(ifelse(j==1,"nrow","ncol"),"(parms[[\"",curVar_ind,"\"]])==1"))
}else{
ind=which(size_unique_list$size==as.numeric(curSize))
matched_var=size_unique_list$var_ind[ind]
matched_var_ind=varDims[matched_var,]$ind
matched_var_name=varDims[matched_var,]$var
matched_size_ind=size_unique_list$size_ind[ind]
if(matched_var==i&&matched_size_ind==j){
#If the matched data is itself, put the size info in the table
prefix=ifelse(j==1,"nrow","ncol")
curVar_info[4+j]=paste0(prefix,"(parms[[",curVar_ind,"]])")
}else{
prefix=ifelse(matched_size_ind==1,"nrow","ncol")
#If not, put the matched size into the table and add the rule to check it
curVar_info[4+j]=paste0(prefix,"(parms[[",matched_var_ind,"]])")
curRule=c(curVar_name,paste0(prefix,"(parms[[\"",curVar_name,"\"]])==",
prefix,"(parms[[\"",matched_var_name,"\"]])"))
}
}
if(!is.null(curRule)){
rule=rbind(rule,curRule,stringsAsFactors=FALSE)
}
}
varDims[i,]=curVar_info
}
rule
varDims
#Find the rule for the parameters with values
rule=data.frame(var=character(0),rule=character(0),stringsAsFactors = FALSE)
for(i in seq_along(allVars_ind)){
curVar_info=varDims[i,]
curVar_ind=curVar_info$ind
curVar_name=curVar_info$var
for(j in seq_len(2)){
curRule=NULL
curSize=curVar_info[2+j]
if(curSize==1){
curVar_info[4+j]=1
curRule=c(curVar_name,paste0(ifelse(j==1,"nrow","ncol"),"(parms[[\"",curVar_ind,"\"]])==1"))
}else{
ind=which(size_unique_list$size==as.numeric(curSize))
matched_var=size_unique_list$var_ind[ind]
matched_var_ind=varDims[matched_var,]$ind
matched_var_name=varDims[matched_var,]$var
matched_size_ind=size_unique_list$size_ind[ind]
prefix=ifelse(j==1,"nrow","ncol")
prefix_matched=ifelse(matched_size_ind==1,"nrow","ncol")
if(matched_var==i&&matched_size_ind==j){
#If the matched data is itself, put the size info in the table
curVar_info[4+j]=paste0(prefix,"(parms[[",curVar_ind,"]])")
}else{
#If not, put the matched size into the table and add the rule to check it
curVar_info[4+j]=paste0(prefix_matched,"(parms[[",matched_var_ind,"]])")
curRule=c(curVar_name,paste0(prefix,"(parms[[\"",curVar_name,"\"]])==",
prefix_matched,"(parms[[\"",matched_var_name,"\"]])"))
}
}
if(!is.null(curRule)){
rule=rbind(rule,curRule,stringsAsFactors=FALSE)
}
}
varDims[i,]=curVar_info
}
varDims
rule
colnames(rule)=c("var",rule)
colnames(rule)=c("var","rule")
rule
devtools::load_all(".")
m=100
n=200
m=100
n=200
t_stat=function(x,y){
x.size=dim(x)
y.size=dim(y)
x.m=colMeans(x)
y.m=colMeans(y)
df=x.size[1]+y.size[1]-2
s=(colSums(sweep(x, 2, x.m, `-`)^2)+colSums(sweep(y, 2, y.m, `-`)^2))/(df)
t=abs((x.m-y.m)/sqrt(s*(1/x.size[1]+1/y.size[1])))
t
}
t_stat_gpu=function(ind,data,sampleX,sampleY){
x=subRef(data,sampleX[,ind],)
y=subRef(data,sampleY[,ind],)
x_m=colMeans(x)
y_m=colMeans(y)
x_rowNum=nrow(x)
y_rowNum=nrow(y)
df=x_rowNum+y_rowNum-2
s=(colSums(sweep(x, 2, t(x_m), `-`)^2)+colSums(sweep(y, 2,t(y_m), `-`)^2))/df
t=abs((x_m-y_m)/(s*(1/x_rowNum+1/y_rowNum))^0.5)
return(t)
}
t_stat_cpu<-function(ind,data,sampleX,sampleY){
t_stat(data[sampleX[,ind],],data[sampleY[,ind],])
}
x_sampleN=50
y_sampleN=100
permute_num=10
total_sampleN=x_sampleN+y_sampleN
nParms=20
data=matrix(rnorm(total_sampleN*nParms),total_sampleN,nParms)
permute_ind=sapply(seq_len(permute_num),function(x)sample(1:total_sampleN))
permute_ind_x=permute_ind[1:x_sampleN,]
permute_ind_y=permute_ind[-(1:x_sampleN),]
code=compileGPUCode(1:permute_num,t_stat_gpu,data,permute_ind_x,permute_ind_y)
code$Exp
devtools::load_all(".")
code=compileGPUCode(1:permute_num,t_stat_gpu,data,permute_ind_x,permute_ind_y)
code$Exp
test_that("T-test2",{
t_stat=function(x,y){
x.size=dim(x)
y.size=dim(y)
x.m=colMeans(x)
y.m=colMeans(y)
df=x.size[1]+y.size[1]-2
s=(colSums(sweep(x, 2, x.m, `-`)^2)+colSums(sweep(y, 2, y.m, `-`)^2))/(df)
t=abs((x.m-y.m)/sqrt(s*(1/x.size[1]+1/y.size[1])))
t
}
t_stat_gpu=function(ind,data,sampleX,sampleY){
x=subRef(data,sampleX[,ind],)
y=subRef(data,sampleY[,ind],)
x_m=colMeans(x)
y_m=colMeans(y)
x_rowNum=nrow(x)
y_rowNum=nrow(y)
df=x_rowNum+y_rowNum-2
s=(colSums(sweep(x, 2, t(x_m), `-`)^2)+colSums(sweep(y, 2,t(y_m), `-`)^2))/df
t=abs((x_m-y_m)/(s*(1/x_rowNum+1/y_rowNum))^0.5)
return(t)
}
t_stat_cpu<-function(ind,data,sampleX,sampleY){
t_stat(data[sampleX[,ind],],data[sampleY[,ind],])
}
x_sampleN=50
y_sampleN=100
permute_num=10
total_sampleN=x_sampleN+y_sampleN
nParms=20
data=matrix(rnorm(total_sampleN*nParms),total_sampleN,nParms)
permute_ind=sapply(seq_len(permute_num),function(x)sample(1:total_sampleN))
permute_ind_x=permute_ind[1:x_sampleN,]
permute_ind_y=permute_ind[-(1:x_sampleN),]
res_gpu=gpuSapply(1:permute_num,t_stat_gpu,data,permute_ind_x,permute_ind_y)
res_cpu=sapply(1:permute_num,t_stat_cpu,data,permute_ind_x,permute_ind_y)
expect_equal(res_gpu,res_cpu)
})
devtools::load_all(".")
devtools::load_all(".")
opt=gpuSapply.getOption()
opt$verbose=FALSE
performance_res=c()
GPU=getDeviceInfo(getDeviceIndex())
INFO=c(as.character(Sys.Date()),GPU$deviceName,GPU$globalMemory,GPU$compute_unit_num)
message("Largest K values")
source("../gpuMagicNote/performance measurement/scripts/largestK.R")
performance_res=rbind(performance_res,c(INFO,"Largest K",excution_time,memory_usage))
message("Loss function")
source("../gpuMagicNote/performance measurement/scripts/lossFunc.R")
performance_res=rbind(performance_res,c(INFO,"loss func",excution_time,memory_usage))
message("Permutation T-test")
source("../gpuMagicNote/performance measurement/scripts/permuteT.R")
R_general_size
?abs
?floor
devtools::load_all(".")
.elementFuncs
warning(elementFuncs)
warning(.elementFuncs)
devtools::load_all(".")
length(.elementFuncs)
length(.sizeFuncs)
names(.sizeFuncs)
.elementFuncs
devtools::load_all(".")
devtools::test()
testFunc<-function(ind,A,B){
C=abs(B[,ind])+A[,ind]
return_nocpy(C)
}
A=matrix(runif(n*m),m,n)
B=matrix(runif(n*m),m,n)-0.5
res_gpu=gpuSapply(1:n,testFunc,A,B)
m=10
n=20
testFunc<-function(ind,A,B){
C=abs(B[,ind])+A[,ind]
return_nocpy(C)
}
A=matrix(runif(n*m),m,n)
B=matrix(runif(n*m),m,n)-0.5
res_gpu=gpuSapply(1:n,testFunc,A,B)
res_gpu=gpuSapply(1:n,testFunc,A,B)
testFunc<-function(ind,A){
A[,ind]=abs(A[,ind])
return(A[,ind])
}
A=runif(n*m,n,m)
res_gpu=gpuSapply(1:m,testFunc,A)
testFunc<-function(ind,A){
A[,ind]=abs(A[,ind])
return(A[,ind])
}
A=matrix(runif(n*m),n,m)-0.5
res_gpu=gpuSapply(1:m,testFunc,A)
res_cpu=sapply(1:m,testFunc,A)
expect_equal(res_gpu,res_cpu)
devtools::load_all(".")
devtools::load_all(".")
m=100
n=200
testFunc<-function(ind,A,B){
C=abs(B[,ind])+A[,ind]
return_nocpy(C)
}
A=matrix(runif(n*m),m,n)
B=matrix(runif(n*m),m,n)-0.5
res_gpu=gpuSapply(1:n,testFunc,A,B)
res_gpu=gpuSapply(1:n,testFunc,A,B)
profile_elementOP(varInfo, Exp)
parmsInfoPack
parmsIndex[i]
parmsInfo[[i]]
combineExpInfo
combineInsertCode
devtools::load_all(".")
testFunc<-function(ind,A,B){
C=abs(B[,ind])+A[,ind]
return_nocpy(C)
}
A=matrix(runif(n*m),m,n)
B=matrix(runif(n*m),m,n)-0.5
res_gpu=gpuSapply(1:n,testFunc,A,B)
devtools::test()
testFunc<-function(ind){
}
gpuSapply(1:m,testFunc)
code=compileGPUCode(1:m,testFunc)
code$Exp
code$gpu_code
devtools::test()
expect_output(gpuSapply(1:m,testFunc))
?expect_output
expect_silent(gpuSapply(1:m,testFunc))
devtools::load_all(".")
opt=gpuSapply.getOption()
opt$verbose=FALSE
performance_res=c()
GPU=getDeviceInfo(getDeviceIndex())
INFO=c(as.character(Sys.Date()),GPU$deviceName,GPU$globalMemory,GPU$compute_unit_num)
message("Largest K values")
source("../gpuMagicNote/performance measurement/scripts/largestK.R")
performance_res=rbind(performance_res,c(INFO,"Largest K",excution_time,memory_usage))
message("Loss function")
source("../gpuMagicNote/performance measurement/scripts/lossFunc.R")
performance_res=rbind(performance_res,c(INFO,"loss func",excution_time,memory_usage))
message("Permutation T-test")
source("../gpuMagicNote/performance measurement/scripts/permuteT.R")
performance_res=rbind(performance_res,c(INFO,"Permutation T-test",excution_time,memory_usage))
message("Permutation T-test 2")
source("../gpuMagicNote/performance measurement/scripts/permuteT2.R")
performance_res=rbind(performance_res,c(INFO,"Permutation T-test 2",excution_time,memory_usage))
performance_res=as.data.frame(performance_res,stringsAsFactors=FALSE)
colnames(performance_res)=c("Date","Device","Memory","Compute Unit","Test name","Test time","Global usage","Shared usage")
performance_res$'Test time'=round(as.numeric(as.character(performance_res$'Test time')),5)
performance_res
file='../gpuMagicNote/performance measurement/record.csv'
performance_record = read.csv(file =file ,stringsAsFactors=FALSE,header = TRUE)
colnames(performance_res)=colnames(performance_record)
performance_record=rbind(performance_record,performance_res)
write.csv(performance_record, file = file,row.names=FALSE)
setDevice(2)
getDeviceList()
devtools::load_all(".")
getCurDevice()
getDeviceList()
devtools::load_all(".")
getDeviceList()
devtools::load_all(".")
getDeviceList()
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
getDeviceList()
devtools::load_all(".")
devtools::load_all(".")
getDeviceList()
devtools::load_all(".")
getDeviceList()
devtools::load_all(".")
getDeviceInfo()
getDeviceList()
getDeviceInfo(1)
getDeviceInfo(2)
.libPaths()
devtools::load_all(".")
getDeviceList()
devtools::load_all(".")
getDeviceList()
devtools::load_all(".")
getDeviceList()
library(gpuMagic)
getDeviceList()
devtools::load_all(recompile=T)
?devtools::load_all
devtools::load_all(".")
devtools::load_all(recompile=T)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
getDeviceList()
devtools::test()
opt=gpuSapply.getOption()
opt$verbose=FALSE
performance_res=c()
GPU=getDeviceInfo(getDeviceIndex())
INFO=c(as.character(Sys.Date()),GPU$deviceName,GPU$globalMemory,GPU$compute_unit_num)
message("Largest K values")
source("../gpuMagicNote/performance measurement/scripts/largestK.R")
performance_res=rbind(performance_res,c(INFO,"Largest K",excution_time,memory_usage))
message("Loss function")
source("../gpuMagicNote/performance measurement/scripts/lossFunc.R")
performance_res=rbind(performance_res,c(INFO,"loss func",excution_time,memory_usage))
message("Permutation T-test")
source("../gpuMagicNote/performance measurement/scripts/permuteT.R")
computeLoss<-function(ind,x,y,parms){
#Find the parameters for the thread
parm=parms[ind,]
#Compute y hat, use no-copy transpose
y_hat=x%*%t_nocpy(parm)
#absolute loss value(L1 loss)
loss=sum(abs(y-y_hat))
return(loss)
}
#Sample size
n=500
#Number of parameters
p=2
beta=c(2,3)
#Generate data
x=matrix(runif(n*p),n,p)
e=runif(n)
y=x%*%beta+e
#brute-force search
search_range=seq(0,10,0.1)
parms=expand.grid(search_range,search_range)
res_gpu=gpuSapply(seq_len(nrow(parms)),computeLoss,x=x,y=y,parms=parms)
devtools::load_all(".")
message("Largest K values")
source("../gpuMagicNote/performance measurement/scripts/largestK.R")
devtools::load_all(".")
devtools::load_all(".")
opt=gpuSapply.getOption()
opt$verbose=FALSE
performance_res=c()
GPU=getDeviceInfo(getDeviceIndex())
INFO=c(as.character(Sys.Date()),GPU$deviceName,GPU$globalMemory,GPU$compute_unit_num)
message("Largest K values")
source("../gpuMagicNote/performance measurement/scripts/largestK.R")
performance_res=rbind(performance_res,c(INFO,"Largest K",excution_time,memory_usage))
message("Loss function")
source("../gpuMagicNote/performance measurement/scripts/lossFunc.R")
performance_res=rbind(performance_res,c(INFO,"loss func",excution_time,memory_usage))
message("Permutation T-test")
source("../gpuMagicNote/performance measurement/scripts/permuteT.R")
performance_res=rbind(performance_res,c(INFO,"Permutation T-test",excution_time,memory_usage))
message("Permutation T-test 2")
source("../gpuMagicNote/performance measurement/scripts/permuteT2.R")
performance_res=rbind(performance_res,c(INFO,"Permutation T-test 2",excution_time,memory_usage))
performance_res=as.data.frame(performance_res,stringsAsFactors=FALSE)
colnames(performance_res)=c("Date","Device","Memory","Compute Unit","Test name","Test time","Global usage","Shared usage")
performance_res$'Test time'=round(as.numeric(as.character(performance_res$'Test time')),5)
performance_res
excution_time
memory_usage
message("Permutation T-test 2")
source("../gpuMagicNote/performance measurement/scripts/permuteT2.R")
performance_res=rbind(performance_res,c(INFO,"Permutation T-test 2",excution_time,memory_usage))
performance_res=as.data.frame(performance_res,stringsAsFactors=FALSE)
colnames(performance_res)=c("Date","Device","Memory","Compute Unit","Test name","Test time","Global usage","Shared usage")
performance_res$'Test time'=round(as.numeric(as.character(performance_res$'Test time')),5)
performance_res
excution_time
excution_time=system.time(for(i in 1:10){res_gpu=sapply(1:permute_num,t_stat_gpu,data,permute_ind_x,permute_ind_y,.options =opt)})
message("Permutation T-test 2")
source("../gpuMagicNote/performance measurement/scripts/permuteT2.R")
performance_res=rbind(performance_res,c(INFO,"Permutation T-test 2",excution_time,memory_usage))
performance_res
opt=gpuSapply.getOption()
opt$verbose=FALSE
performance_res=c()
GPU=getDeviceInfo(getDeviceIndex())
INFO=c(as.character(Sys.Date()),GPU$deviceName,GPU$globalMemory,GPU$compute_unit_num)
message("Largest K values")
source("../gpuMagicNote/performance measurement/scripts/largestK.R")
performance_res=rbind(performance_res,c(INFO,"Largest K",excution_time,memory_usage))
message("Loss function")
source("../gpuMagicNote/performance measurement/scripts/lossFunc.R")
performance_res=rbind(performance_res,c(INFO,"loss func",excution_time,memory_usage))
message("Permutation T-test")
source("../gpuMagicNote/performance measurement/scripts/permuteT.R")
performance_res=rbind(performance_res,c(INFO,"Permutation T-test",excution_time,memory_usage))
message("Permutation T-test 2")
source("../gpuMagicNote/performance measurement/scripts/permuteT2.R")
performance_res=rbind(performance_res,c(INFO,"Permutation T-test 2",excution_time,memory_usage))
performance_res=as.data.frame(performance_res,stringsAsFactors=FALSE)
colnames(performance_res)=c("Date","Device","Memory","Compute Unit","Test name","Test time","Global usage","Shared usage")
performance_res$'Test time'=round(as.numeric(as.character(performance_res$'Test time')),5)
performance_res
file='../gpuMagicNote/performance measurement/record.csv'
performance_record = read.csv(file =file ,stringsAsFactors=FALSE,header = TRUE)
colnames(performance_res)=colnames(performance_record)
performance_record=rbind(performance_record,performance_res)
write.csv(performance_record, file = file,row.names=FALSE)
library(gpuMagic)
BiocCheck::BiocCheck()
devtools::document()
GPUVar
devtools::load_all(".")
testFunc<-function(ind,A){
tmp=A[,ind]
return(tmp)
}
A=matrix(runif(n*m),n,m)
res_gpu=gpuSapply(1:m,testFunc,A)
m=100
n=200
testFunc<-function(ind,A){
tmp=A[,ind]
return(tmp)
}
A=matrix(runif(n*m),n,m)
res_gpu=gpuSapply(1:m,testFunc,A)
library(gpuMagic)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
Sys.getenv()
Sys.getenv("SystemRoot")
paste0(Sys.getenv("SystemRoot"),"/System32/OpenCL.dll")
cat(paste0(Sys.getenv("SystemRoot"),"/System32/OpenCL.dll"))
devtools::load_all(".")
cat(paste0(Sys.getenv("SystemRoot"),"/System32/OpenCL.dll"))
Sys.getenv("SystemRoot")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
cat(c(1,2))
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
