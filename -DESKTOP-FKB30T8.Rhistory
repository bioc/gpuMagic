#Force releasing the GPU memory
.gpuResourcesManager$getGPUusage()
#Force releasing the GPU memory
.gpuResourcesManager$getGPUusage()
gc()
#Force releasing the GPU memory
.gpuResourcesManager$getGPUusage()
10%/%3
10%%3
devtools::load_all(".")
devtools::load_all(".")
library("tictoc")
fileName <- 'inst/script/kernelMatrix.cpp'
threadNum=64
n=threadNum*16*2
A=matrix(runif(n*n),n,n)
B=matrix(runif(n*n),n,n)
C=matrix(0,n,n)
#Allocate GPU memory
dev_C=gpuMatrix(C,T_F64)
##GPU computing
tic()
.kernel(file=fileName,kernel="matrix_product",A,B,dev_C,dim(A),dim(B),dim(C),threadNum = threadNum)
dev_C=sync(dev_C)
toc()
.kernel(file=fileName,kernel="matrix_product",A,B,dev_C,dim(A),dim(B),dim(C))
devtools::load_all(".")
threadNum
n
n/256
n/256*
n
devtools::load_all(".")
library("tictoc")
fileName <- 'inst/script/kernelMatrix.cpp'
threadNum=64
n=threadNum*16*2
A=matrix(runif(n*n),n,n)
B=matrix(runif(n*n),n,n)
C=matrix(0,n,n)
#Allocate GPU memory
dev_C=gpuMatrix(C,T_F64)
##GPU computing
tic()
.kernel(file=fileName,kernel="matrix_product",A,B,dev_C,dim(A),dim(B),dim(C),threadNum=1)
dev_C=sync(dev_C)
toc()
devtools::load_all(".")
devtools::load_all(".")
library("tictoc")
fileName <- 'inst/script/kernelMatrix.cpp'
n=2000
A=matrix(runif(n*n),n,n)
B=matrix(runif(n*n),n,n)
C=matrix(0,n,n)
#Allocate GPU memory
dev_C=gpuMatrix(C,T_F64)
##GPU computing
tic()
.kernel(file=fileName,kernel="matrix_product",A,B,dev_C,dim(A),dim(B),dim(C),verbose=T)
dev_C=sync(dev_C)
toc()
##R internel function
tic()
expectRes=A%*%B
toc()
tic()
.kernel(file=fileName,kernel="matrix_product",A,B,dev_C,dim(A),dim(B),dim(C),verbose=T)
dev_C=sync(dev_C)
toc()
devtools::load_all(".")
library("tictoc")
fileName <- 'inst/script/kernelMatrix.cpp'
n=2000
A=matrix(runif(n*n),n,n)
B=matrix(runif(n*n),n,n)
C=matrix(0,n,n)
#Allocate GPU memory
dev_C=gpuMatrix(C,T_F64)
##GPU computing
tic()
.kernel(file=fileName,kernel="matrix_product",A,B,dev_C,dim(A),dim(B),dim(C),verbose=F)
dev_C=sync(dev_C)
toc()
library("tictoc")
fileName <- 'inst/script/kernelMatrix.cpp'
n=2000
A=matrix(runif(n*n),n,n)
B=matrix(runif(n*n),n,n)
C=matrix(0,n,n)
#Allocate GPU memory
dev_C=gpuMatrix(C,T_F64)
##GPU computing
tic()
.kernel(file=fileName,kernel="matrix_product",A,B,dev_C,dim(A),dim(B),dim(C),verbose=T)
dev_C=sync(dev_C)
toc()
tic()
.kernel(file=fileName,kernel="matrix_product",A,B,dev_C,dim(A),dim(B),dim(C),verbose=F)
dev_C=sync(dev_C)
toc()
getDeviceDetail(0)
devtools::load_all(".")
devtools::load_all(".")
getDeviceDetail(0)
getDeviceList()
getDeviceList()
setDevice(2)
library("tictoc")
fileName <- 'inst/script/kernelMatrix.cpp'
n=2000
A=matrix(runif(n*n),n,n)
B=matrix(runif(n*n),n,n)
C=matrix(0,n,n)
#Allocate GPU memory
dev_C=gpuMatrix(C,T_F64)
##GPU computing
tic()
.kernel(file=fileName,kernel="matrix_product",A,B,dev_C,dim(A),dim(B),dim(C))
dev_C=sync(dev_C)
toc()
##R internel function
tic()
expectRes=A%*%B
toc()
setDevice(1)
library("tictoc")
fileName <- 'inst/script/kernelMatrix.cpp'
n=2000
A=matrix(runif(n*n),n,n)
B=matrix(runif(n*n),n,n)
C=matrix(0,n,n)
#Allocate GPU memory
dev_C=gpuMatrix(C,T_F64)
##GPU computing(GeForce 940M)
tic()
.kernel(file=fileName,kernel="matrix_product",A,B,dev_C,dim(A),dim(B),dim(C))
dev_C=sync(dev_C)
toc()
getDeviceList()
?hash
length(hash( 1:3, lapply(1:3, seq, 1 )))
library("hash")
length(hash( 1:3, lapply(1:3, seq, 1 )))
devtools::load_all(".")
getDeviceList()
setDevice(0)
getCurDevice()
library("tictoc")
fileName <- 'inst/script/kernelMatrix.cpp'
n=2000
A=matrix(runif(n*n),n,n)
B=matrix(runif(n*n),n,n)
C=matrix(0,n,n)
#Allocate GPU memory
dev_C=gpuMatrix(C,T_F64)
##GPU computing(GeForce 940M)
tic()
.kernel(file=fileName,kernel="matrix_product",A,B,dev_C,dim(A),dim(B),dim(C))
dev_C=sync(dev_C)
toc()
tic()
expectRes=A%*%B
toc()
##R internel function
tic()
C=A%*%B
toc()
#The differences between GPU and R
error=mean(abs(as.matrix(dev_C)-C))
error
#The differences between GPU and R
max(abs(as.matrix(dev_C)-C))
#Force releasing the GPU memory
.gpuResourcesManager$getGPUusage()
#Force releasing the GPU memory
.gpuResourcesManager$getGPUusage()
.gpuResourcesManager$releaseAll()
.gpuResourcesManager$getGPUusage()
#Auto garbage collection
.gpuResourcesManager$setMaxMemLimit(20)
.gpuResourcesManager$getGPUusage()
dev_matrix=gpuMatrix(c(1),T_F64)
.gpuResourcesManager$getGPUusage()
dev_matrix=gpuMatrix(c(1),T_F64)
.gpuResourcesManager$getGPUusage()
dev_matrix=gpuMatrix(c(1),T_F64)
.gpuResourcesManager$getGPUusage()
gc()
.gpuResourcesManager$getGPUusage()
gc()
.gpuResourcesManager$getGPUusage()
ls()
dev_matrix=gpuMatrix(c(1),T_F64)
.gpuResourcesManager$getGPUusage()
gc()
.gpuResourcesManager$getGPUusage()
rm(ls())
ls()
?rm
rm(list=ls())
gc()
.gpuResourcesManager$getGPUusage()
getDeviceList()
getCurDevice()
setDevice(2)
library("tictoc")
fileName <- 'inst/script/kernelMatrix.cpp'
#C=A%*%B
n=2000
A=matrix(runif(n*n),n,n)
B=matrix(runif(n*n),n,n)
C=matrix(0,n,n)
#Allocate GPU memory
dev_C=gpuMatrix(C,T_F64)
devtools::load_all(".")
setDevice(2)
library("tictoc")
fileName <- 'inst/script/kernelMatrix.cpp'
#C=A%*%B
n=2000
A=matrix(runif(n*n),n,n)
B=matrix(runif(n*n),n,n)
C=matrix(0,n,n)
#Allocate GPU memory
dev_C=gpuMatrix(C,T_F64)
##GPU computing(GeForce 940M)
tic()
#Allocate GPU memory
dev_C=gpuMatrix(C,T_F64)
.kernel(file=fileName,kernel="matrix_product",A,B,dev_C,dim(A),dim(B),dim(C),threadNum = 2)
dev_C=sync(dev_C)
toc()
install.packages(inline)
install.packages("inline")
suppressMessages(require(inline))
library(Rcpp)
A=matrix(runif(n*n),n,n)
B=matrix(runif(n*n),n,n)
suppressMessages(require(inline))
code <- '
arma::mat coeff = Rcpp::as<arma::mat>(a);
arma::mat errors = Rcpp::as<arma::mat>(e);
int m = errors.n_rows; int n = errors.n_cols;
arma::mat simdata(m,n);
simdata.row(0) = arma::zeros<arma::mat>(1,n);
for (int row=1; row<m; row++) {
simdata.row(row) = simdata.row(row-1)*trans(coeff)+errors.row(row);
}
return Rcpp::wrap(simdata);
'
rcppSim <- cxxfunction(signature(a="numeric",e="numeric"),code,plugin="RcppArmadillo")
rcppData <- rcppSim(A,B)
rcppData <- rcppSim(A,B)
C=A%*%B
max(abs(rcppData-C))
rcppData
head(rcppData)
cppFunction('NumericMatrix mmult(const NumericMatrix& m1, const NumericMatrix& m2){
if (m1.ncol() != m2.nrow()) stop ("Incompatible matrix dimensions");
NumericMatrix out(m1.nrow(),m2.ncol());
NumericVector rm1, cm2;
for (size_t i = 0; i < m1.nrow(); ++i) {
rm1 = m1(i,_);
for (size_t j = 0; j < m2.ncol(); ++j) {
cm2 = m2(_,j);
out(i,j) = std::inner_product(rm1.begin(), rm1.end(), cm2.begin(), 0.);
}
}
return out;
}')
res=mmult(A,B)
C=A%*%B
max(abs(rcppData-C))
max(abs(res-C))
tic()
res=mmult(A,B)
toc()
devtools::load_all(".")
getDeviceList()
library("tictoc")
fileName <- 'inst/script/kernelMatrix.cpp'
#C=A%*%B
n=2000
A=matrix(runif(n*n),n,n)
B=matrix(runif(n*n),n,n)
C=matrix(0,n,n)
##GPU computing(GeForce 940M)
tic()
#Allocate GPU memory
dev_C=gpuMatrix(C,T_F64)
.kernel(file=fileName,kernel="matrix_product",A,B,dev_C,dim(A),dim(B),dim(C))
dev_C=sync(dev_C)
toc()
##R internel function
tic()
C=A%*%B
toc()
#The differences between GPU and R
max(abs(as.matrix(dev_C)-C))
n=4000
A=matrix(runif(n*n),n,n)
B=matrix(runif(n*n),n,n)
C=matrix(0,n,n)
##GPU computing(GeForce 940M)
tic()
#Allocate GPU memory
dev_C=gpuMatrix(C,T_F64)
.kernel(file=fileName,kernel="matrix_product",A,B,dev_C,dim(A),dim(B),dim(C))
dev_C=sync(dev_C)
toc()
#Force releasing the GPU memory
.gpuResourcesManager$getGPUusage()
.gpuResourcesManager$releaseAll()
.gpuResourcesManager$getGPUusage()
#Auto garbage collection
.gpuResourcesManager$setMaxMemLimit(20)
.gpuResourcesManager$getGPUusage()
dev_matrix=gpuMatrix(c(1),T_F64)
.gpuResourcesManager$getGPUusage()
dev_matrix=gpuMatrix(c(1),T_F64)
.gpuResourcesManager$getGPUusage()
dev_matrix=gpuMatrix(c(1),T_F64)
.gpuResourcesManager$getGPUusage()
gc()
.gpuResourcesManager$getGPUusage()
rm(list=ls())
gc()
.gpuResourcesManager$getGPUusage()
.gpuResourcesManager$getGPUusage()
getDeviceList()
getCurDevice()
getDeviceList()
getCurDevice()
setDevice(1)
library("tictoc")
fileName <- 'inst/script/kernelMatrix.cpp'
#C=A%*%B
n=4000
A=matrix(runif(n*n),n,n)
B=matrix(runif(n*n),n,n)
C=matrix(0,n,n)
##GPU computing(GeForce 940M)
tic()
#Allocate GPU memory
dev_C=gpuMatrix(C,T_I32)
.kernel(file=fileName,kernel="matrix_product",A,B,dev_C,dim(A),dim(B),dim(C),blockNum = length(C))
dev_C=sync(dev_C)
toc()
devtools::load_all(".")
getDeviceList()
getCurDevice()
setDevice(1)
library("tictoc")
fileName <- 'inst/script/kernelMatrix.cpp'
#C=A%*%B
n=4000
A=matrix(runif(n*n),n,n)
B=matrix(runif(n*n),n,n)
C=matrix(0,n,n)
##GPU computing(GeForce 940M)
tic()
#Allocate GPU memory
dev_C=gpuMatrix(C,T_I32)
.kernel(file=fileName,kernel="matrix_product",A,B,dev_C,dim(A),dim(B),dim(C),blockNum = length(C))
dev_C=sync(dev_C)
toc()
##R internel function
tic()
C=A%*%B
toc()
setDevice(0)
library("tictoc")
fileName <- 'inst/script/kernelMatrix.cpp'
#C=A%*%B
n=4000
A=matrix(runif(n*n),n,n)
B=matrix(runif(n*n),n,n)
C=matrix(0,n,n)
##GPU computing(GeForce 940M)
tic()
#Allocate GPU memory
dev_C=gpuMatrix(C,T_I32)
.kernel(file=fileName,kernel="matrix_product",A,B,dev_C,dim(A),dim(B),dim(C),blockNum = length(C))
dev_C=sync(dev_C)
toc()
library("tictoc")
fileName <- 'inst/script/kernelMatrix.cpp'
#C=A%*%B
n=4000
A=matrix(runif(n*n),n,n)
B=matrix(runif(n*n),n,n)
C=matrix(0,n,n)
##GPU computing(GeForce 940M)
tic()
#Allocate GPU memory
dev_C=gpuMatrix(C,T_I32)
.kernel(file=fileName,kernel="matrix_product",A,B,dev_C,dim(A),dim(B),dim(C),blockNum = length(C))
dev_C=sync(dev_C)
toc()
tic()
C=A%*%B
toc()
#The differences between GPU and R
max(abs(as.matrix(dev_C)-C))
devtools::load_all(".")
getDeviceList()
getCurDevice()
library("tictoc")
fileName <- 'inst/script/kernelMatrix.cpp'
#C=A%*%B
n=4000
A=matrix(runif(n*n),n,n)
B=matrix(runif(n*n),n,n)
C=matrix(0,n,n)
##GPU computing(GeForce 940M)
tic()
#Allocate GPU memory
dev_C=gpuMatrix(C,T_I32)
.kernel(file=fileName,kernel="matrix_product",A,B,dev_C,dim(A),dim(B),dim(C),blockNum = length(C))
dev_C=sync(dev_C)
toc()
##R internel function
tic()
C=A%*%B
toc()
#The differences between GPU and R
max(abs(as.matrix(dev_C)-C))
a=as.matrix(dev_C)
head(a)
a[1]
a[2]
length(C)
tic()
#Allocate GPU memory
dev_C=gpuMatrix(C,T_I32)
.kernel(file=fileName,kernel="matrix_product",A,B,dev_C,dim(A),dim(B),dim(C))
dev_C=sync(dev_C)
toc()
##GPU computing(GeForce 940M)
tic()
#Allocate GPU memory
dev_C=gpuMatrix(C,T_f64)
.kernel(file=fileName,kernel="matrix_product",A,B,dev_C,dim(A),dim(B),dim(C),blockNum = length(C))
dev_C=sync(dev_C)
##GPU computing(GeForce 940M)
tic()
#Allocate GPU memory
dev_C=gpuMatrix(C,T_F64)
.kernel(file=fileName,kernel="matrix_product",A,B,dev_C,dim(A),dim(B),dim(C),blockNum = length(C))
dev_C=sync(dev_C)
toc()
#The differences between GPU and R
max(abs(as.matrix(dev_C)-C))
##R internel function
tic()
C=A%*%B
toc()
#The differences between GPU and R
max(abs(as.matrix(dev_C)-C))
c[1]
C[1]
library("tictoc")
fileName <- 'inst/script/kernelMatrix.cpp'
#C=A%*%B
n=4000
A=matrix(runif(n*n),n,n)
B=matrix(runif(n*n),n,n)
C=matrix(0,n,n)
##GPU computing(GeForce 940M)
tic()
#Allocate GPU memory
dev_C=gpuMatrix(C,T_F64)
.kernel(file=fileName,kernel="matrix_product",A,B,dev_C,dim(A),dim(B),dim(C),blockNum = length(C))
dev_C=sync(dev_C)
toc()
##R internel function
tic()
C=A%*%B
toc()
#The differences between GPU and R
max(abs(as.matrix(dev_C)-C))
#Force releasing the GPU memory
.gpuResourcesManager$getGPUusage()
a=matrix(1:6,2,3)
a
b=c(2,3)
a/b
b=c(2,3,4)
a/b
getDeviceList()
devtools::load_all(".")
getDeviceList()
getCurDevice()
library("tictoc")
fileName <- 'inst/script/kernelMatrix.cpp'
#C=A%*%B
n=2000
A=matrix(runif(n*n),n,n)
B=matrix(runif(n*n),n,n)
C=matrix(0,n,n)
##GPU computing(GeForce 940M)
tic()
#Allocate GPU memory
dev_C=gpuMatrix(C,T_F64)
.kernel(file=fileName,kernel="matrix_product",A,B,dev_C,dim(A),dim(B),dim(C),totalThreadNum = length(C))
dev_C=sync(dev_C)
toc()
##R internel function
tic()
C=A%*%B
toc()
