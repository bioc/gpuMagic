devtools::load_all(".")
?devTools
??devTools
package_version("devTools")
devtools::document()
testFunc<-function(col_ind,A){
b=A[1]
d=matrix(0,10,b)
}
n=3
m=4
A=matrix(runif(n*m),n,m)
B=matrix(runif(n*m),n,m)
parms=matchParms(1:m,list(A),testFunc)
#Convert all the parameters to matrix type
parms=formatParms(parms)
sig=createSapplySignature(parms,FUN,.macroParms,.option)
.macroParms=NULL
.option=gpuSapply.getOption()
devtools::load_all(".")
.option=gpuSapply.getOption()
.option
sig=createSapplySignature(parms,FUN,.macroParms,.option)
FUN=testFunc()
FUN=testFunc
sig=createSapplySignature(parms,FUN,.macroParms,.option)
sig_hash=digest(sig)
sig
has.key(sig_hash,gpuApplyFuncList)
GPUcode1=.compileGPUCode(FUN,parms,.macroParms=.macroParms,.option=.option)
macroParms=c("A")
sig=createSapplySignature(parms,FUN,.macroParms,.option)
sig_hash=digest(sig)
sig
GPUcode1=gpuApplyFuncList[sig_hash]
GPUcode1=.compileGPUCode(FUN,parms,.macroParms=.macroParms,.option=.option)
.macroParms
.macroParms=macroParms
GPUcode1=.compileGPUCode(FUN,parms,.macroParms=.macroParms,.option=.option)
printVarInfo(varInfo)
GPUcode1=.compileGPUCode(FUN,parms,.macroParms=.macroParms,.option=.option)
codeMetaInfo=list()
codeMetaInfo$Exp=funcToExp(FUN)$code
codeMetaInfo$parms=parms
codeMetaInfo$macroParms=.macroParms
codeMetaInfo
codeMetaInfo0=codePreprocessing(codeMetaInfo)
codeMetaInfo1=RParser1(codeMetaInfo0)
codeMetaInfo2=RParser2(codeMetaInfo1)
profileMeta1=RProfile1(codeMetaInfo2)
profileMeta1$varInfo
profileMeta2=RProfile2(profileMeta1)
profileMeta3=RRecompiler(profileMeta2)
a=matrix(1:4,2,2)
a=matrix(1:9,3,3)
a[1,2]
t(a)[1,2]
t(a)[1,2]=6
devtools::document()
devtools::document()
Simplify("1+1")
Simplify("a[3+b+5]+1")
'printf("%f",(uint)a)'
a
a[1:2,2:3]
a[1:2,2:3][1]
a[1:2,2:3][1]=1000
a
sig
sig=c()
parmsName=names(parms)
for(i in 1:length(parms)){
#Type of the parameters
if(sum(dim(parms[[i]]))==2)
sig=c(sig,T_scale)
else
sig=c(sig,T_matrix)
#Precision type of the parameter when it is a gpuMatrix class
if(class(parms[[i]])=="gpuMatrix"){
sig=c(sig,parms[[i]]$type)
}
#When it is a macro, add the dim and data
if(parmsName[i] %in% .macroParms)
sig=c(sig,paste0(dim(parms[[i]]),collapse = ","),paste0(parms[[i]][],collapse = ","))
}
parmsName
.macroParms
parmsName[i] %in% .macroParms
sig
sig=createSapplySignature(parms,FUN,.macroParms,.option)
sig
devtools::load_all(".")
sig=createSapplySignature(parms,FUN,.macroParms,.option)
sig
sig=c()
parmsName=names(parms)
for(i in 1:length(parms)){
#Type of the parameters
varSig=""
if(sum(dim(parms[[i]]))==2)
varSig=paste0(varSig,T_scale)
else
varSig=paste0(varSig,T_matrix)
#Precision type of the parameter when it is a gpuMatrix class
if(class(parms[[i]])=="gpuMatrix"){
varSig=paste0(varSig,parms[[i]]$type)
}
#When it is a macro, add the dim and data
if(parmsName[i] %in% .macroParms)
varSig=paste0(varSig,paste0(dim(parms[[i]]),collapse = ","),paste0(parms[[i]][],collapse = ","))
sig=c(varSig,varSig)
}
sig
length(parms)
parmsName
devtools::load_all(".")
sig=createSapplySignature(parms,FUN,.macroParms,.option)
sig
?paste
devtools::load_all(".")
sig=createSapplySignature(parms,FUN,.macroParms,.option)
sig
devtools::load_all(".")
sig=createSapplySignature(parms,FUN,.macroParms,.option)
devtools::load_all(".")
sig=createSapplySignature(parms,FUN,.macroParms,.option)
sig
sig_hash=digest(sig)
GPUcode1=.compileGPUCode(FUN,parms,.macroParms=.macroParms,.option=.option)
devtools::load_all(".")
GPUcode1=.compileGPUCode(FUN,parms,.macroParms=.macroParms,.option=.option)
testFunc<-function(col_ind,A){
b=A[1]
}
n=3
m=4
A=matrix(runif(n*m),n,m)
B=matrix(runif(n*m),n,m)
parms=matchParms(1:m,list(A),testFunc)
macroParms=c("A")
codeMetaInfo=list()
codeMetaInfo$Exp=funcToExp(testFunc)$code
codeMetaInfo$parms=parms
#Convert all the parameters to matrix type
parms=formatParms(parms)
sig=createSapplySignature(parms,FUN,.macroParms,.option)
sig_hash=digest(sig)
if(has.key(sig_hash,gpuApplyFuncList)){
GPUcode1=gpuApplyFuncList[sig_hash]
GPUcode1[["parms"]]=parms
names(GPUcode1$parms)=GPUcode1$parmsName
}else{
GPUcode1=.compileGPUCode(FUN,parms,.macroParms=.macroParms,.option=.option)
if(.option$debugCode!="")
GPUcode1$gpu_code=.option$debugCode
#Store the GPU object
gpuApplyFuncList[sig_hash]=saveGPUcode(GPUcode1)
}
GPUcode2=fillGPUdata(GPUcode1,.option=.option)
.globalThreadNum
.option
.globalThreadNum=ceiling(length(X)/64)*64
X
X=1:100
.globalThreadNum=ceiling(length(X)/64)*64
.option$localThreadNum=64
GPUcode2$gpu_code=opt_workerNumber(GPUcode2$varInfo,GPUcode2$gpu_code)
cat(GPUcode2$gpu_code)
testFunc<-function(ind,A,B){
tmp=subRef(A,ind,)
C=tmp%*%B
return(C)
}
n=20
m=100
k=20
A=matrix(runif(n*m),n,m)
B=matrix(runif(m*k),m,k)
res3=gpuSapply(1:n,testFunc,A,B)
res2=A%*%B
range(res2-t(res3))
gpuApplyFuncList
saveGPUcode(GPUcode1)
devtools::load_all(".")
saveGPUcode(GPUcode1)
a=saveGPUcode(GPUcode1)
fillGPUdata
GPUVar$functionCount
devtools::load_all(".")
gpuApplyFuncList
library("tictoc")
testFunc<-function(ind,A,B){
tmp=subRef(A,ind,)
C=tmp%*%B
return(C)
}
n=20
m=100
k=20
A=matrix(runif(n*m),n,m)
B=matrix(runif(m*k),m,k)
tic()
res3=gpuSapply(1:n,testFunc,A,B)
toc()
devtools::load_all(".")
gpuApplyFuncList
.option=gpuSapply.getOption()
testFunc<-function(ind,A,B){
tmp=subRef(A,ind,)
C=tmp%*%B
return(C)
}
n=20
m=100
k=20
A=matrix(runif(n*m),n,m)
B=matrix(runif(m*k),m,k)
.option=gpuSapply.getOption()
.option$verbose=T
tic()
res3=gpuSapply(1:n,testFunc,A,B,.option = .option)
toc()
testFunc<-function(ind,A,B){
tmp=subRef(A,ind,)
C=tmp%*%B
return(C)
}
n=20
m=100
k=20
A=matrix(runif(n*m),n,m)
B=matrix(runif(m*k),m,k)
.option=gpuSapply.getOption()
.option$verbose=T
tic()
res3=gpuSapply(1:n,testFunc,A,B,.option = .option)
toc()
gpuApplyFuncList
GPUcode1=as.list(gpuApplyFuncList)
GPUcode1=as.list(gpuApplyFuncList)[[1]]
parms=matchParms(1:m,list(A,B),testFunc)
parms=matchParms(X,parms,FUN)
parms
names(parms)
#Convert all the parameters to matrix type
parms=formatParms(parms)
GPUcode1[["parms"]]=parms
GPUcode1$parmsName
names(GPUcode1$parms)=GPUcode1$parmsName
GPUcode2=fillGPUdata(GPUcode1,.option=.option)
GPUcode2$varInfo
GPUcode2$gpu_code=opt_workerNumber(GPUcode2$varInfo,GPUcode2$gpu_code)
devtools::load_all(".")
#gpuMagic.option$setDefaultFloat("double")
testFunc<-function(ind,A,B){
tmp=subRef(A,ind,)
C=tmp%*%B
return(C)
}
n=20
m=100
k=20
A=matrix(runif(n*m),n,m)
B=matrix(runif(m*k),m,k)
.option=gpuSapply.getOption()
.option$verbose=T
tic()
res3=gpuSapply(1:n,testFunc,A,B,.option = .option)
toc()
#gpuMagic.option$setDefaultFloat("double")
testFunc<-function(ind,A,B){
tmp=subRef(A,ind,)
C=tmp%*%B
return(C)
}
n=20
m=100
k=20
A=matrix(runif(n*m),n,m)
B=matrix(runif(m*k),m,k)
.option=gpuSapply.getOption()
.option$verbose=T
tic()
res3=gpuSapply(1:n,testFunc,A,B,.option = .option)
toc()
#gpuMagic.option$setDefaultFloat("double")
testFunc<-function(ind,A,B){
tmp=subRef(A,ind,)
C=tmp%*%B
return(C)
}
n=20
m=100
k=20
A=matrix(runif(n*m),n,m)
B=matrix(runif(m*k),m,k)
.option=gpuSapply.getOption()
.option$verbose=T
tic()
res3=gpuSapply(1:n,testFunc,A,B,.option = .option)
toc()
#gpuMagic.option$setDefaultFloat("double")
testFunc<-function(ind,A,B){
tmp=subRef(A,ind,)
C=tmp%*%B
return(C)
}
n=20
m=100
k=20
A=matrix(runif(n*m),n,m)
B=matrix(runif(m*k),m,k)
.option=gpuSapply.getOption()
.option$verbose=T
tic()
res3=gpuSapply(1:n,testFunc,A,B,.option = .option)
toc()
#gpuMagic.option$setDefaultFloat("double")
testFunc<-function(ind,A,B){
tmp=subRef(A,ind,)
C=tmp%*%B
return(C)
}
n=20
m=100
k=20
A=matrix(runif(n*m),n,m)
B=matrix(runif(m*k),m,k)
.option=gpuSapply.getOption()
.option$verbose=T
tic()
res3=gpuSapply(1:n,testFunc,A,B,.option = .option)
toc()
#gpuMagic.option$setDefaultFloat("double")
testFunc<-function(ind,A,B){
tmp=subRef(A,ind,)
C=tmp%*%B
return(C)
}
n=20
m=100
k=20
A=matrix(runif(n*m),n,m)
B=matrix(runif(m*k),m,k)
.option=gpuSapply.getOption()
.option$verbose=T
tic()
res3=gpuSapply(1:n,testFunc,A,B,.option = .option)
toc()
tic()
res2=A%*%B
toc()
#gpuMagic.option$setDefaultFloat("double")
testFunc<-function(ind,A,B){
tmp=subRef(A,ind,)
C=tmp%*%B
return(C)
}
n=200
m=1000
k=200
A=matrix(runif(n*m),n,m)
B=matrix(runif(m*k),m,k)
.option=gpuSapply.getOption()
.option$verbose=T
tic()
res3=gpuSapply(1:n,testFunc,A,B,.option = .option)
toc()
tic()
res2=A%*%B
toc()
range(res2-t(res3))
res3
devtools::load_all(".")
testFunc<-function(ind,A,B){
tmp=A[ind,]
C=tmp%*%B
return(C)
}
n=2000
m=1000
k=2000
A=matrix(runif(n*m),n,m)
B=matrix(runif(m*k),m,k)
res_cpu=sapply(1:n,testFunc,A,B)
library("tictoc")
testFunc<-function(ind,A,B){
tmp=A[ind,]
C=tmp%*%B
return(C)
}
n=2000
m=1000
k=2000
A=matrix(runif(n*m),n,m)
B=matrix(runif(m*k),m,k)
tic()
res_cpu=sapply(1:n,testFunc,A,B)
toc()
tic()
res3=gpuSapply(1:n,testFunc,A,B)
toc()
.option=gpuSapply.getOption()
tic()
res3=gpuSapply(1:n,testFunc,A,B,.options =.option )
toc()
range(res_cpu-res3)
res3[1:10]
range(res_cpu-t(res3))
n=20
m=10
k=20
A=matrix(runif(n*m),n,m)
B=matrix(runif(m*k),m,k)
tic()
res_cpu=sapply(1:n,testFunc,A,B)
toc()
testFunc<-function(ind,A,B){
tmp=A[ind,]
C=tmp%*%B
return(C)
}
n=20
m=10
k=20
A=matrix(runif(n*m),n,m)
B=matrix(runif(m*k),m,k)
tic()
res_cpu=sapply(1:n,testFunc,A,B)
toc()
.option=gpuSapply.getOption()
.option$verbose=F
tic()
res3=gpuSapply(1:n,testFunc,A,B,.options =.option )
toc()
res_cpu
n=5
m=3
k=3
A=matrix(runif(n*m),n,m)
B=matrix(runif(m*k),m,k)
tic()
res_cpu=sapply(1:n,testFunc,A,B)
toc()
.option=gpuSapply.getOption()
.option$verbose=F
tic()
res3=gpuSapply(1:n,testFunc,A,B,.options =.option )
toc()
res_cpu
res3
res2=A%*%B
res2
testFunc<-function(ind,A,B){
tmp=subRef(A,ind,)
C=tmp%*%B
return(C)
}
n=5
m=3
k=3
A=matrix(runif(n*m),n,m)
B=matrix(runif(m*k),m,k)
tic()
res_cpu=sapply(1:n,testFunc,A,B)
toc()
tic()
res3=gpuSapply(1:n,testFunc,A,B,.options =.option )
toc()
res3
res_cpu
testFunc<-function(ind,A,B){
tmp=subRef(A,ind,)
C=tmp%*%B
return(C)
}
n=2000
m=1000
k=2000
A=matrix(runif(n*m),n,m)
B=matrix(runif(m*k),m,k)
tic()
res_cpu=sapply(1:n,testFunc,A,B)
toc()
.option=gpuSapply.getOption()
tic()
res3=gpuSapply(1:n,testFunc,A,B,.options =.option )
toc()
range(res_cpu-res3)
getDeviceList()
setDevice(1)
testFunc<-function(ind,A,B){
tmp=subRef(A,ind,)
C=tmp%*%B
return(C)
}
n=2000
m=1000
k=2000
A=matrix(runif(n*m),n,m)
B=matrix(runif(m*k),m,k)
tic()
res_cpu=sapply(1:n,testFunc,A,B)
toc()
.option=gpuSapply.getOption()
tic()
res3=gpuSapply(1:n,testFunc,A,B,.options =.option )
toc()
code=compileGPUCode(1:(n*k),matMul,A,B)
cat(code$gpu_code)
code=compileGPUCode(1:k,testFunc,A,B)
cat(code$gpu_code)
