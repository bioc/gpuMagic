kernel void gpu_kernel0(global double* gpu_loop_data,global double* A,global double* B,
global char* gpu_gp_data,
global uint* gpu_gp_size1_arg,
global uint* gpu_gp_size2_arg,
global uint* gpu_gp_offset,
global char* gpu_gs_data,
global uint* gpu_gs_size1,
global uint* gpu_gs_size2,
global uint* gpu_gs_offset,
local char* gpu_ls_data,
local uint* gpu_ls_size1,
local uint* gpu_ls_size2,
local uint* gpu_ls_offset,
global double* gpu_return_variable,
global uint* gpu_sizeInfo){
uint gpu_global_id=get_global_id(0);
if(gpu_global_id<1024){
uint gpu_gp_totalSize=gpu_sizeInfo[0];
uint gpu_gp_matrixNum=gpu_sizeInfo[1];
global uint* gpu_gp_size1=gpu_gp_size1_arg+gpu_gp_matrixNum*gpu_global_id;
global uint* gpu_gp_size2=gpu_gp_size2_arg+gpu_gp_matrixNum*gpu_global_id;
uint gpu_worker_offset=gpu_global_id*gpu_gp_totalSize;
uint gpu_return_size=gpu_sizeInfo[2];
global double* C=(global double*)(gpu_gp_data+gpu_worker_offset+gpu_gp_offset[0]);
double ind;
double opencl_tmp_1;
opencl_tmp_1=gpu_global_id+1;
ind=gpu_loop_data[(uint)(opencl_tmp_1-1)];

double gpu_matMul_tmp;
uint gz_size10=gpu_gs_size1[0];
uint gz_size11=gpu_gs_size1[1];
for(uint gpu_matMul_i=1;gpu_matMul_i<=gpu_gs_size1[0];gpu_matMul_i++){
for(uint gpu_matMul_j=1;gpu_matMul_j<=1;gpu_matMul_j++){
gpu_matMul_tmp=0;
for(uint gpu_matMul_k=1;gpu_matMul_k<=gpu_gs_size2[0];gpu_matMul_k++){
gpu_matMul_tmp=gpu_matMul_tmp+A[(uint)(gpu_matMul_i-1 +(gpu_matMul_k-1)*gz_size10)]*B[(uint)(gpu_matMul_k-1 +(ind-1)*gz_size11)];
}
C[(uint)(gpu_matMul_i-1 +(gpu_matMul_j-1)*gz_size10)]=gpu_matMul_tmp;
}
}
for(uint gpu_return_i=0;gpu_return_i<gpu_return_size;gpu_return_i++){

gpu_return_variable[gpu_return_i+gpu_global_id*gpu_return_size]=C[gpu_return_i];
}
}
}