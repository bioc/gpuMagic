kernel void gpu_kernel_3(global float* gpu_loop_data,global float* A,
                         global char* gpu_gp_data,
                         global uint* gpu_gp_size1_arg,
                         global uint* gpu_gp_size2_arg,
                         global uint* gpu_gp_offset,
                         global char* gpu_gs_data,
                         global uint* gpu_gs_size1,
                         global uint* gpu_gs_size2,
                         global uint* gpu_gs_offset,
                         local char* gpu_ls_data,
                         local uint* gpu_ls_size1,
                         local uint* gpu_ls_size2,
                         local uint* gpu_ls_offset,
                         global float* gpu_return_variable,
                         global uint* gpu_sizeInfo){
  //Function data preparation
  uint gpu_global_id=get_global_id(0);
  uint gpu_gp_totalSize=gpu_sizeInfo[0];
  uint gpu_gp_matrixNum=gpu_sizeInfo[1];
  global uint* gpu_gp_size1=gpu_gp_size1_arg+gpu_gp_matrixNum*gpu_global_id;
  global uint* gpu_gp_size2=gpu_gp_size2_arg+gpu_gp_matrixNum*gpu_global_id;
  uint gpu_worker_offset=gpu_global_id*gpu_gp_totalSize;
  uint gpu_return_size=gpu_sizeInfo[2];
  //Function variable definition
  float col_ind;
  float curA;
  float gpu_temp_var1;
  uint gpu_temp_var2;
  float largest;
  int largest_ind;
  float second_largest;
  int second_largest_ind;
  //End of the stage 1 compilation
  //Thread number optimization
  if(gpu_global_id<gpu_gs_size1[1] * gpu_gs_size2[1]){
    ///Matrix dimension optimization
    uint gpu_gs_size1_0=gpu_gs_size1[0];
    //Start of the GPU code
    //gpu_temp_var1 = gpu_global_id + 1
    gpu_temp_var1=gpu_global_id+1;
    //col_ind = gpu_loop_data[gpu_temp_var1]
    col_ind=gpu_loop_data[(uint)(gpu_temp_var1 - 1)];
    //largest = 0
    largest=0;
    //largest_ind = 1
    largest_ind=1;
    //second_largest = 0
    second_largest=0;
    //second_largest_ind = 1
    second_largest_ind=1;
    //gpu_temp_var2 = nrow(A)
    gpu_temp_var2=gpu_gs_size1_0;
    if (col_ind == 1678) {
      //message(second_largest)
      printf("%d,%d,%f",gpu_gs_size1_0,(uint)((col_ind - 1) * gpu_gs_size1_0 + 8503 - 1),A[(uint)((col_ind - 1) * gpu_gs_size1_0 + 8503 - 1)]);
    }
    for (int gpu_loop_ind_0 = 1; gpu_loop_ind_0 <= gpu_temp_var2; gpu_loop_ind_0++) {
      //curA = A[gpu_loop_ind_0, col_ind]
      curA = A[(uint)((col_ind - 1) * gpu_gs_size1_0 + gpu_loop_ind_0 - 1)]; {
        if (curA > largest) {
          
          //second_largest = largest
          second_largest = largest;
          //second_largest_ind = largest_ind
          second_largest_ind = largest_ind;
          //compiler.setVersion(largest, 2)
          //largest = curA
          largest = curA;
          //compiler.setVersion(largest_ind, 2)
          //largest_ind = gpu_loop_ind_0
          largest_ind = gpu_loop_ind_0; {
            if (col_ind == 1678) {
              //message(second_largest)
              printf("first:%d:%f",second_largest_ind, second_largest);
            }
          }
          
        } else {
          {
            if (curA > second_largest) {
              
              //compiler.setVersion(second_largest, 2)
              //second_largest = curA
              second_largest = curA;
              //compiler.setVersion(second_largest_ind, 2)
              //second_largest_ind = gpu_loop_ind_0
              second_largest_ind = gpu_loop_ind_0;
              if (col_ind == 1678) {
                printf("second:%d:%f",second_largest_ind, second_largest);
              }
            }
          }
          
        }
      }
      
    }
    //return(second_largest_ind)
    {
      uint gpu_return_k = 0;
      for (uint gpu_return_i = 0; gpu_return_i < 1; gpu_return_i++) {
        
        for (uint gpu_return_j = 0; gpu_return_j < 1; gpu_return_j++) {
          
          gpu_return_variable[gpu_return_k + gpu_global_id * gpu_return_size] = second_largest_ind;
          gpu_return_k = gpu_return_k + 1;
          if (gpu_return_k == gpu_return_size) {
            break;
          }
        }
      }
    }
  }
}