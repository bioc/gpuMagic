kernel void gpu_kernel0(global double* gpu_loop_data,global double* A,global double* B,
  global char* gpu_gp_data,
  global uint* gpu_gp_size1_arg,
  global uint* gpu_gp_size2_arg,
  global uint* gpu_gp_offset,
  global char* gpu_gs_data,
  global uint* gpu_gs_size1,
  global uint* gpu_gs_size2,
  global uint* gpu_gs_offset,
  local char* gpu_ls_data,
  local uint* gpu_ls_size1,
  local uint* gpu_ls_size2,
  local uint* gpu_ls_offset,
  global double* gpu_return_variable,
  global uint* gpu_sizeInfo){
    uint gpu_global_id=get_global_id(0);
    if(gpu_global_id<10){

      uint gpu_gp_totalSize=gpu_sizeInfo[0];
      uint gpu_gp_matrixNum=gpu_sizeInfo[1];
      global uint* gpu_gp_size1=gpu_gp_size1_arg+gpu_gp_matrixNum*gpu_global_id;
      global uint* gpu_gp_size2=gpu_gp_size2_arg+gpu_gp_matrixNum*gpu_global_id;
      uint gpu_worker_offset=gpu_global_id*gpu_gp_totalSize;
      uint gpu_return_size=gpu_sizeInfo[2];
      global double* C=(global double*)(gpu_gp_data+gpu_worker_offset+gpu_gp_offset[0]);
      global double* gpu_private_spcae=(global double*)(gpu_gp_data+gpu_worker_offset+gpu_gp_offset[1]);
      double gpu_private_spcae_end;
      double gpu_private_spcae_length;
      double gpu_private_spcae_loopNum;
      double gpu_private_spcae_start;
      double gpu_private_spcae_tmp;
      double ind;
      double opencl_tmp_1;
      double opencl_tmp_10;
      int opencl_tmp_11;
      int opencl_tmp_12;
      int opencl_tmp_13;
      double opencl_tmp_14;
      double opencl_tmp_15;
      int opencl_tmp_16;
      double opencl_tmp_17;
      double opencl_tmp_18;
      double opencl_tmp_19;
      int opencl_tmp_2;
      double opencl_tmp_20;
      double opencl_tmp_21;
      double opencl_tmp_22;
      double opencl_tmp_23;
      double opencl_tmp_24;
      int opencl_tmp_3;
      double opencl_tmp_4;
      int opencl_tmp_5;
      int opencl_tmp_6;
      int opencl_tmp_7;
      int opencl_tmp_8;
      int opencl_tmp_9;
      global double* tmp=(global double*)(gpu_gp_data+gpu_worker_offset+gpu_gp_offset[2]);
      printf("%d\n",gpu_worker_offset+gpu_gp_offset[2]);
      opencl_tmp_1=gpu_global_id+1;
      ind=gpu_loop_data[(uint)opencl_tmp_1-1];
      opencl_tmp_2=gpu_gs_size1[1];

      //printf("%d:%d\n",gpu_gs_size1[0],opencl_tmp_2);
      for(int gpu_loop_ind_0=1;gpu_loop_ind_0<=opencl_tmp_2;gpu_loop_ind_0++){
        for(int gpu_loop_ind_1=1;gpu_loop_ind_1<=1;gpu_loop_ind_1++){
          tmp[(uint)gpu_loop_ind_0-1 +((uint)gpu_loop_ind_1-1)*gpu_gp_size1[2]]=0;
        }
      }
      //printf("%d\n",gpu_gs_size1[0]);
      opencl_tmp_3=gpu_gs_size1[1];
      for(int gpu_loop_ind_2=1;gpu_loop_ind_2<=opencl_tmp_3;gpu_loop_ind_2++){
        opencl_tmp_4=B[(uint)gpu_loop_ind_2-1 +((uint)ind-1)*gpu_gs_size1[1]];
        tmp[(uint)gpu_loop_ind_2-1]=opencl_tmp_4;
      }

      opencl_tmp_5=gpu_gs_size1[0];
      opencl_tmp_6=gpu_gp_size2[2];

      opencl_tmp_7=gpu_gp_size1[0];
      for(int gpu_loop_ind_3=1;gpu_loop_ind_3<=opencl_tmp_7;gpu_loop_ind_3++){
        opencl_tmp_8=gpu_gp_size2[0];
        for(int gpu_loop_ind_4=1;gpu_loop_ind_4<=opencl_tmp_8;gpu_loop_ind_4++){
          C[(uint)gpu_loop_ind_3-1 +((uint)gpu_loop_ind_4-1)*gpu_gp_size1[0]]=0;
        }
      }
      opencl_tmp_9=gpu_gs_size1[0];
      for(int gpu_loop_ind_5=1;gpu_loop_ind_5<=opencl_tmp_9;gpu_loop_ind_5++){
        opencl_tmp_11=gpu_gs_size2[0];
        opencl_tmp_10=(double)opencl_tmp_11/10;
        gpu_private_spcae_loopNum=ceil(opencl_tmp_10);
        gpu_private_spcae_start=1;
        gpu_private_spcae_end=1;
        gpu_private_spcae_length=0;
        for(int gpu_loop_ind_6=1;gpu_loop_ind_6<=gpu_private_spcae_loopNum;gpu_loop_ind_6++){
          gpu_private_spcae_start=gpu_private_spcae_end;
          gpu_private_spcae_end=gpu_private_spcae_end+10;
          opencl_tmp_12=gpu_gs_size2[0];
          if(gpu_private_spcae_end > opencl_tmp_12){
            opencl_tmp_13=gpu_gs_size2[0];
            gpu_private_spcae_end=opencl_tmp_13+1;}
            gpu_private_spcae_length=gpu_private_spcae_end-gpu_private_spcae_start;
            for(int gpu_loop_ind_7=1;gpu_loop_ind_7<=gpu_private_spcae_length;gpu_loop_ind_7++){
              opencl_tmp_15=gpu_private_spcae_start+gpu_loop_ind_7;
              opencl_tmp_14=opencl_tmp_15-1;
              opencl_tmp_23=A[(uint)gpu_loop_ind_5-1 +((uint)opencl_tmp_14-1)*gpu_gs_size1[0]];
              gpu_private_spcae[(uint)gpu_loop_ind_7-1]=opencl_tmp_23;
            }
            opencl_tmp_16=gpu_gp_size2[2];
            printf("%d:%d,%d\n",gpu_global_id,opencl_tmp_16,gpu_private_spcae_length);
            for(int gpu_loop_ind_8=1;gpu_loop_ind_8<=opencl_tmp_16;gpu_loop_ind_8++){
              gpu_private_spcae_tmp=0;
              for(int gpu_loop_ind_9=1;gpu_loop_ind_9<=gpu_private_spcae_length;gpu_loop_ind_9++){
                opencl_tmp_18=gpu_private_spcae[(uint)gpu_loop_ind_9-1];
                opencl_tmp_21=gpu_private_spcae_start+gpu_loop_ind_9;
                opencl_tmp_20=opencl_tmp_21-1;
                opencl_tmp_19=tmp[(uint)opencl_tmp_20-1 +((uint)gpu_loop_ind_8-1)*gpu_gp_size1[2]];
                opencl_tmp_17=opencl_tmp_18*opencl_tmp_19;
                gpu_private_spcae_tmp=gpu_private_spcae_tmp+opencl_tmp_17;
              }
              opencl_tmp_22=C[(uint)gpu_loop_ind_5-1 +((uint)gpu_loop_ind_8-1)*gpu_gp_size1[0]];
              opencl_tmp_24=opencl_tmp_22+gpu_private_spcae_tmp;
              C[(uint)gpu_loop_ind_5-1 +((uint)gpu_loop_ind_8-1)*gpu_gp_size1[0]]=opencl_tmp_24;
              printf("%d:,%f,%f\n",gpu_loop_ind_8,C[(uint)gpu_loop_ind_5-1 +((uint)gpu_loop_ind_8-1)*gpu_gp_size1[0]],opencl_tmp_24);
            }
          }
        }
        for(uint gpu_return_i=0;gpu_return_i<gpu_return_size;gpu_return_i++){

          gpu_return_variable[gpu_return_i+gpu_global_id*gpu_return_size]=C[gpu_return_i];
        }
      }
    }
