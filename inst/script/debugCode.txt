kernel void gpu_kernel_3(global double* gpu_loop_data,global double* A,global double* B,
global char* gpu_gp_data,
global uint* gpu_gp_size1_arg,
global uint* gpu_gp_size2_arg,
global uint* gpu_gp_offset,
global char* gpu_gs_data,
global uint* gpu_gs_size1,
global uint* gpu_gs_size2,
global uint* gpu_gs_offset,
local char* gpu_ls_data,
local uint* gpu_ls_size1,
local uint* gpu_ls_size2,
local uint* gpu_ls_offset,
global double* gpu_return_variable,
global uint* gpu_sizeInfo){
uint gpu_global_id=get_global_id(0);
uint gpu_gp_totalSize=gpu_sizeInfo[0];
uint gpu_gp_matrixNum=gpu_sizeInfo[1];
global uint* gpu_gp_size1=gpu_gp_size1_arg+gpu_gp_matrixNum*gpu_global_id;
global uint* gpu_gp_size2=gpu_gp_size2_arg+gpu_gp_matrixNum*gpu_global_id;
uint gpu_worker_offset=gpu_global_id*gpu_gp_totalSize;
uint gpu_return_size=gpu_sizeInfo[2];
double gpu_tmp_1;
double ind;
global double* tmp=(global double*)(gpu_gp_data+gpu_worker_offset+gpu_gp_offset[0]);
//RCParser1 end
if(gpu_global_id<gpu_gs_size1[2] * gpu_gs_size2[2]){


gpu_tmp_1=gpu_global_id+1;
ind=gpu_loop_data[(uint)(gpu_tmp_1 - 1)];
printf("%d,%d\n", gpu_gp_size1[0], gpu_gp_size2[0]);
}
}